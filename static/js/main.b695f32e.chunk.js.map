{"version":3,"sources":["api.ts","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["URL","getData","url","a","fetch","res","json","data","getUsers","getTodos","getPreparedTodos","users","todos","map","todo","user","find","id","userId","TodoItem","name","title","completed","TodoList","handleSort","className","type","onClick","key","App","useState","isLoaded","setLoad","isLoading","setLoading","setTodos","sort","b","localeCompare","then","ReactDOM","render","document","getElementById"],"mappings":"ySAAMA,EAAM,uCAENC,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACIC,MAAMF,GADV,cACRG,EADQ,gBAEKA,EAAIC,OAFT,cAERC,EAFQ,yBAIPA,GAJO,2CAAH,sDAOPC,EAAQ,uCAAG,sBAAAL,EAAA,+EACRF,EAAQ,GAAD,OAAID,EAAJ,YADC,2CAAH,qDAIRS,EAAQ,uCAAG,sBAAAN,EAAA,+EACRF,EAAQ,GAAD,OAAID,EAAJ,YADC,2CAAH,qDAIDU,EAAgB,uCAAG,8BAAAP,EAAA,sEACVK,IADU,cACxBG,EADwB,gBAEVF,IAFU,cAExBG,EAFwB,yBAIvBA,EAAMC,KAAI,SAACC,GAAD,mBAAC,eACbA,GADY,IAEfC,KAAMJ,EAAMK,MAAK,SAACD,GAAD,OAAUA,EAAKE,KAAOH,EAAKI,gBANhB,2CAAH,qDCXhBC,EAA4B,SAAC,GAAc,IAAZL,EAAW,EAAXA,KAC1C,OACE,6BACE,2BAAIA,EAAKC,KAAKK,MACd,2BAAIN,EAAKO,OACT,2BAAIP,EAAKQ,UAAY,YAAc,iBCH5BC,EAA4B,SAAC,GAA2B,IAAzBX,EAAwB,EAAxBA,MAAOY,EAAiB,EAAjBA,WACjD,OACE,oCACE,yBAAKC,UAAU,oBACb,4BACEC,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMH,EAAW,UAH5B,gBAOA,4BACEE,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMH,EAAW,WAH5B,iBAOA,4BACEE,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMH,EAAW,eAH5B,2BAQF,wBAAIC,UAAU,QACXb,EAAMC,KAAI,SAAAC,GAAI,OACb,wBAAIc,IAAKd,EAAKG,GAAIQ,UAAU,aAC1B,kBAAC,EAAD,CAAUX,KAAMA,WC0Bbe,EA1DO,WAAO,IAAD,EACEC,oBAAkB,GADpB,mBACnBC,EADmB,KACTC,EADS,OAEMF,oBAAkB,GAFxB,mBAEnBG,EAFmB,KAERC,EAFQ,OAGAJ,mBAAwB,IAHxB,mBAGnBlB,EAHmB,KAGZuB,EAHY,KAiC1B,OACE,oCACE,wBAAIV,UAAU,QAAd,yBAIGM,EASC,kBAAC,EAAD,CACEnB,MAAOA,EACPY,WApCS,SAACY,GAClB,OAAQA,GACN,IAAK,OACH,OAAOD,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEY,KAAKK,KAAKkB,cAAcD,EAAEtB,KAAKK,UAErD,IAAK,QACH,OAAOe,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEkB,MAAMiB,cAAcD,EAAEhB,WAE5C,IAAK,YACH,OAAOc,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAWlC,EAAEmB,WAAce,EAAEf,cAEvC,QACE,OAAOV,MAWL,4BACEc,KAAK,SACLD,UAAU,SACVE,QAtCW,WACnBO,GAAW,GACXxB,IAAmB6B,MAAK,SAACzB,GACvBqB,EAASrB,GACTkB,GAAQ,GACRE,GAAW,QAmCJD,EAAY,aAAe,UC9CxCO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b695f32e.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com';\n\nconst getData = async (url: string) => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n};\n\nconst getUsers = async (): Promise<Users> => {\n  return getData(`${URL}/users`);\n};\n\nconst getTodos = async (): Promise<Todos> => {\n  return getData(`${URL}/todos`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodos> => {\n  const users = await getUsers();\n  const todos = await getTodos();\n\n  return todos.map((todo) => ({\n    ...todo,\n    user: users.find((user) => user.id === todo.userId) as User,\n  }));\n};\n","import React from 'react';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  return (\n    <div>\n      <p>{todo.user.name}</p>\n      <p>{todo.title}</p>\n      <p>{todo.completed ? 'completed' : 'uncompleted'}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\ninterface Props {\n  todos: PreparedTodos;\n  handleSort: (todo: string) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, handleSort }) => {\n  return (\n    <>\n      <div className=\"button-container\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => handleSort('name')}\n        >\n          Sort by name\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => handleSort('title')}\n        >\n          Sort by title\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => handleSort('completed')}\n        >\n          Sort by completed task\n        </button>\n      </div>\n      <ul className=\"list\">\n        {todos.map(todo => (\n          <li key={todo.id} className=\"list-item\">\n            <TodoItem todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getPreparedTodos } from './api';\nimport { TodoList } from './components/TodoList';\n\nconst App: React.FC = () => {\n  const [isLoaded, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useState<PreparedTodos>([]);\n\n  const downloadData = () => {\n    setLoading(true);\n    getPreparedTodos().then((todo) => {\n      setTodos(todo);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n  const handleSort = (sort: string) => {\n    switch (sort) {\n      case 'name':\n        return setTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n\n      case 'title':\n        return setTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n\n      case 'completed':\n        return setTodos([...todos]\n          .sort((a, b) => +a.completed - (+b.completed)));\n\n      default:\n        return todos;\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"head\">\n        Dynamic list of TODOs\n      </h1>\n      {\n        !isLoaded ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={downloadData}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <TodoList\n            todos={todos}\n            handleSort={handleSort}\n          />\n        )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}